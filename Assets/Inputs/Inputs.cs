//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""2bec2e8c-93f4-42cd-b79c-30ee370b6dde"",
            ""actions"": [
                {
                    ""name"": ""Cast"",
                    ""type"": ""Button"",
                    ""id"": ""acfbdf58-a9ae-4900-a23a-ceafe10dd508"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cast1"",
                    ""type"": ""Button"",
                    ""id"": ""ef85a88e-e7c4-4662-babe-3dcd07d7875a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cast2"",
                    ""type"": ""Button"",
                    ""id"": ""6a8cde14-9e11-4dfe-b9f0-61d29a3cf0b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e706495a-df17-41c6-a3fd-02ddcac02df1"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6780ab82-8733-41e9-9b44-b0f85a8e72a0"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de9f6858-7ca5-4887-8e66-dd61b6d04be4"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Cast = m_GamePlay.FindAction("Cast", throwIfNotFound: true);
        m_GamePlay_Cast1 = m_GamePlay.FindAction("Cast1", throwIfNotFound: true);
        m_GamePlay_Cast2 = m_GamePlay.FindAction("Cast2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private IGamePlayActions m_GamePlayActionsCallbackInterface;
    private readonly InputAction m_GamePlay_Cast;
    private readonly InputAction m_GamePlay_Cast1;
    private readonly InputAction m_GamePlay_Cast2;
    public struct GamePlayActions
    {
        private @Inputs m_Wrapper;
        public GamePlayActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cast => m_Wrapper.m_GamePlay_Cast;
        public InputAction @Cast1 => m_Wrapper.m_GamePlay_Cast1;
        public InputAction @Cast2 => m_Wrapper.m_GamePlay_Cast2;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void SetCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterface != null)
            {
                @Cast.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnCast;
                @Cast.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnCast;
                @Cast.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnCast;
                @Cast1.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnCast1;
                @Cast1.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnCast1;
                @Cast1.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnCast1;
                @Cast2.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnCast2;
                @Cast2.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnCast2;
                @Cast2.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnCast2;
            }
            m_Wrapper.m_GamePlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Cast.started += instance.OnCast;
                @Cast.performed += instance.OnCast;
                @Cast.canceled += instance.OnCast;
                @Cast1.started += instance.OnCast1;
                @Cast1.performed += instance.OnCast1;
                @Cast1.canceled += instance.OnCast1;
                @Cast2.started += instance.OnCast2;
                @Cast2.performed += instance.OnCast2;
                @Cast2.canceled += instance.OnCast2;
            }
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);
    public interface IGamePlayActions
    {
        void OnCast(InputAction.CallbackContext context);
        void OnCast1(InputAction.CallbackContext context);
        void OnCast2(InputAction.CallbackContext context);
    }
}
